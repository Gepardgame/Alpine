############################ Alpine Configuration ###########################

# Required
# Defines the number of worker threads that the event subsystem will consume.
# Events occur asynchronously and are processed by the Event subsystem. This
# value should be large enough to handle most production situations without
# introducing much delay, yet small enough not to pose additional load on an
# already resource-constrained server.
# A value of 0 will instruct Alpine to allocate 1 thread per CPU core. This
# can further be tweaked using the alpine.worker.thread.multiplier property.
# Default value is 0.
alpine.worker.threads=0

# Required
# Defines a multiplier that is used to calculate the number of threads used
# by the event subsystem. This property is only used when alpine.worker.threads
# is set to 0. A machine with 4 cores and a multiplier of 4, will use (at most)
# 16 worker threads. Default value is 4.
alpine.worker.thread.multiplier=4

# Required
# Defines the path to the data directory. This directory will hold logs,
# keys, and any database or index files along with application-specific
# files or directories.
alpine.data.directory=~/.alpine-example

# Required
# Defines the interval (in seconds) to log general heath information.
# If value equals 0, watchdog logging will be disabled.
alpine.watchdog.logging.interval=0

# Required
# Defines the database mode of operation. Valid choices are:
# 'server', 'embedded', and 'external'.
# In server mode, the database will listen for connections from remote
# hosts. In embedded mode, the system will be more secure and slightly
# faster. External mode should be used when utilizing an external
# database server (i.e. mysql, postgresql, etc).
alpine.database.mode=embedded

# Optional
# Defines the TCP port to use when the database.mode is set to 'server'.
alpine.database.port=9092

# Required
# Specifies the JDBC URL to use when connecting to the database.
alpine.database.url=jdbc:h2:mem:alpine

# Required
# Specifies the JDBC driver class to use.
alpine.database.driver=org.h2.Driver

# Optional
# Specifies the path (including filename) to where the JDBC driver is located.
# alpine.database.driver.path=/path/to/dbdriver.jar

# Optional
# Specifies the username to use when authenticating to the database.
# alpine.database.username=sa

# Optional
# Specifies the password to use when authenticating to the database.
# alpine.database.password=

# Optional
# When authentication is enforced, API keys are required for automation,
# and the user interface will prevent anonymous access by prompting for login
# credentials.
alpine.enforce.authentication=false

# Optional
# When authorization is enforced, team membership for both API keys and
# user accounts are restricted to what the team itself has access to.
# To enforce authorization, the enforce.authentication property (above)
# must be true.
alpine.enforce.authorization=false

# Required
# Specifies the number of bcrypt rounds to use when hashing a users password.
# The higher the number the more secure the password, at the expense of
# hardware resources and additional time to generate the hash.
alpine.bcrypt.rounds=14

# Required
# Defines if LDAP will be used for user authentication. If enabled,
# alpine.ldap.* properties should be set accordingly.
alpine.ldap.enabled=false

# Optional
# Specifies the LDAP server URL
alpine.ldap.server.url=ldap://ldap.example.com:389

# Optional
# Specifies the LDAP server domain. This is normally appended to the end of the
# username to form the userPrincipalName
alpine.ldap.domain=example.com

# Optional
# Specifies the base DN that all queries should search from
alpine.ldap.basedn=dc=example,dc=com

# Optional
# Specifies the LDAP security authentication level to use.
# Its value is one of the following strings: "none", "simple", "strong".
# If this property is empty or unspecified, the behaviour is determined by the service provider.
alpine.ldap.security.auth=simple

# Optional
# If anonymous access is not permitted, specify a username with limited
# access to the directory. Just enough to perform searches.
alpine.ldap.bind.username=

# Optional
# If anonymous access is not permitted, specify a password for the
# username used to bind.
alpine.ldap.bind.password=

# Optional
# Specifies how to map the user identifier entered by the user to that passed through to LDAP.
# If is configured to a non-empty value, the substring %s in this value will be replaced
# with the entered username.
# The recommended format of this value depends on your LDAP server(Active Directory, OpenLDAP, etc.).
# Examples:
#	 alpine.ldap.auth.username.format=%s
#	 alpine.ldap.auth.username.format=%s@example.com
#	 alpine.ldap.auth.username.format=uid=%s,ou=People,dc=example,dc=com
#	 alpine.ldap.auth.username.format=userPrincipalName=%s,ou=People,dc=example,dc=com
alpine.ldap.auth.username.format=

# Optional
# Specifies the Attribute that all queries should use
# The default attribute is userPrincipalName
alpine.ldap.attribute.name=userPrincipalName

# Optional
# Specifies the LDAP attribute used to store a users email address
alpine.ldap.attribute.mail=mail

# Optional
# Specifies the LDAP search filter used to retrieve all groups from the directory.
# Example (Microsoft Active Directory):
#    alpine.ldap.groups.filter=(&(objectClass=group)(objectCategory=Group))
# Example (Fedora 389 Directory, Novell eDirectory, etc):
#    alpine.ldap.groups.filter=(&(objectClass=groupOfUniqueNames))
alpine.ldap.groups.filter=(&(objectClass=group)(objectCategory=Group))

# Optional
# Specifies the LDAP search filter to use to query a user and retrieve a list of groups the
# user is a member of. The {USER_DN} variable will be substituted with the actual value of
# the users DN at runtime.
# Example (Microsoft Active Directory):
#    alpine.ldap.user.groups.filter=(&(objectClass=group)(objectCategory=Group)(member={USER_DN}))
# Example (Microsoft Active Directory - with nested group support):
#    alpine.ldap.user.groups.filter=(member:1.2.840.113556.1.4.1941:={USER_DN})
# Example (Fedora 389 Directory, Novell eDirectory, etc):
#    alpine.ldap.user.groups.filter=(&(objectClass=groupOfUniqueNames)(uniqueMember={USER_DN}))
alpine.ldap.user.groups.filter=(member:1.2.840.113556.1.4.1941:={USER_DN})

# Optional
# Specifies if Alpine (ldap user) accounts are automatically created upon successful authentication.
# When a user logs in with valid credentials but an account has not been previously provisioned
# (either manually or via enabling this option), an authentication failure will be returned. This 
# allows admins to control specifically which ldap users can access the system and which users 
# cannot. When this value is set to true, an Alpine ldap user account will be created and mapped to
# the ldap account automatically. This automatic provisioning only affects authentication, not 
# authorization.
alpine.ldap.user.provisioning=false

# Optional
# This option will ensure that Alpine LDAP user account team memberships are dynamic and synchronized
# with membership of LDAP groups. When an Alpine team is mapped to an LDAP group, all Alpine LDAP users
# will automatically be assigned to the team if they are a member of the group the team is mapped to.
# If the user is later removed from the LDAP group, they will also be removed from the team. This option
# provides the ability to dynamically control user permissions via an external directory server.
alpine.ldap.team.synchronization=false

# Optional
# HTTP proxy. If the address is set, then the port must be set too.
# alpine.http.proxy.address=proxy.example.com
# alpine.http.proxy.port=8888
# alpine.http.proxy.username=
# alpine.http.proxy.password=
